
use std::derive::Tuple;
use std::rng::Distribution::{Distribution, Normal};

pub trait TotalLogP[D] {
  fn .total_log_p(x: D) -> F32;
}

const norm_pdf_logC: F32 = (2.0 * F32::PI).sqrt().ln();

pub impl f32: TotalLogP[F32] {
  fn total_log_p(x: F32) -> F32 {
    -(x ** 2) / 2.0 - norm_pdf_logC
  }
}

pub impl tuple_nil: TotalLogP[()] {
  fn total_log_p(nil: ()) -> F32 {
    1.0
  }
}

pub impl tuple[T, I, R; Tuple[T, I, R], TotalLogP[I], TotalLogP[R]]: TotalLogP[T] {
  fn total_log_p(tuple: T) -> F32 {
    let (init, rest) = tuple as (I, R);
    init.total_log_p() + rest.total_log_p()
  }
}
